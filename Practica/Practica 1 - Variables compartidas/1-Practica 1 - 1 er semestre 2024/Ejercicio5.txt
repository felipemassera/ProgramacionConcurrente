5.	En cada ítem debe realizar una solución concurrente de grano grueso (utilizando <> y/o <await B; S>) para el siguiente problema,
    teniendo en cuenta las condiciones indicadas en el item. 
    
    Existen N personas que deben imprimir un trabajo cada una. 
    
    a).	Implemente una solución suponiendo que existe una única impresora compartida por todas las personas,
         y las mismas la deben usar de a una persona a la vez, sin importar el orden. Existe una función
         Imprimir(documento) llamada por la persona que simula el uso de la impresora.
          Sólo se deben usar los procesos que representan a las Personas. 
     
     opcion A
        bool impresoraLibre = true; 
        
        process persona[id : 0..n-1]{
            Documento documento;            //crear documento
            <await(impresoraLibre); impresoraLibre= false;>
            imprimir(documento);            //envio el documento a ser impreso
            impresoraLibre =true;
        }

     opcion B   
        process persona[id : 0..n-1]{
            Documento documento;            //crear documento
            <imprimir(documento);>            //envio el documento a ser impreso
        }
        
    b)	Modifique la solución de (a) para el caso en que se deba respetar el orden de llegada.
        
        int[] turno =([n] =0);              ///////////CONSULTARR asi se instancia un array inicializado ?
        int numero= 0; int proximo=0;

        process persona[id : 0..n-1]{
            Documento documento;                        //crear documento
            <turno[numero]=id ;  numero ++>             // reservo el turno por orden de llegada con id, aumento el numero para el proximo en el vector
            <await (turno[proximo] == id);>             //espero a que sea el turno 
            imprimir(documento);                        //envio el documento a ser impreso
            proximo ++                                
        }                                               

    c)	Modifique la solución de (a) para el caso en que se deba respetar el orden dado por el identificador del proceso (cuando está
        libre la impresora, de los procesos que han solicitado su uso la debe usar el que tenga menor identificador).
opcion A        
        colaOrdenada C; int siguiente = -1;             //NOTA: Me guio con el EJEMPLO-4 de la explicacion practica 1 

        process persona[id : 0..n-1]{
            Documento documento;                        //crear documento
            < if (siguiente = -1); siguiente = id;     //evaluo si hay alguien en la cola, si no hay nadie, soy el siguiente.
              else { 
                   colaOrdenada.insertar(id)}>
            <await (siguiente==id);> 
            imprimir(documento);    	                //envio el documento a ser impreso
            if (colaOrdenada.empy()){
                siguiente =-1;
            }else{
                siguiente = colaOrdenada.pop();
            }
        }


    d)	Modifique la solución de (a) para el caso en que se deba respetar estrictamente el orden dado por el identificador del proceso
        (la persona X no puede usar la impresora hasta que no haya terminado de usarla la persona X-1). 

        int siguiente=0;
        
        process persona[id : 0..n-1]{
            Documento documento;            //crear documento
            <await (siguiente==id);>
            imprimir(documento)
            siguiente++
        }



    e)	Modifique la solución de (c) para el caso en que además hay un proceso Coordinador que le indica a cada persona cuando puede
        usar la impresora. 
        

        colaOrdenada ; int siguiente = -1;

        process persona[id : 0..n-1]{
            Documento documento;                        //crear documento
            <colaOrdenada.insertar(id)>
            <await (siguiente==id);> 
            imprimir(documento);    	                //envio el documento a ser impreso
            listo = true;
        }
        

        process Coordinador::{
            while(true){
                <if (!colaOrdenada.empy()); siguiente = colaOrdenada.pop();>    
                <await (listo); listo = False>
            }
        }
        