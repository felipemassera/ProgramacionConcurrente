3. 	Dada la siguiente soluci칩n de grano grueso:

int cant = 0; int pri_ocupada = 0; int pri_vacia = 0; int buffer[N]

Process Productor:: {
    while (true) { 
        //produce elemento
        <await (cant < N); cant++>
        buffer[pri_vacia] = elemento;
        pri_vacia = (pri_vacia + 1) mod N;
    }
}

Process Consumidor:: { 
    while (true) { 
        <await (cant > 0); cant-- >
        elemento = buffer[pri_ocupada];
        pri_ocupada = (pri_ocupada + 1) mod N;
        //consume elemento
    }
}

a. Indicar si el siguiente c칩digo funciona para resolver el problema de Productor/Consumidor con un buffer
 de tama침o N. En caso de no funcionar, debe hacer las modificaciones necesarias.

*** El programa no funciona correctamente dado que la escritura y utilizacion de la variable BUFFER
 es utilizada de manera no atomica lo que puede originar problemas en cuanto a la fidelidad de los
 resultados. solucion, que sea atomica <>.

int cant = 0; int pri_ocupada = 0; int pri_vacia = 0; int buffer[N]

Process Productor:: {
    while (true) { 
        //produce elemento
        <await (cant < N); cant++;
        buffer[pri_vacia] = elemento; >
        pri_vacia = (pri_vacia + 1) mod N;
    }
}

Process Consumidor:: { 
    while (true) { 
        <await (cant > 0); cant-- ;
        elemento = buffer[pri_ocupada]; >
        pri_ocupada = (pri_ocupada + 1) mod N;
        //consume elemento
    }
}


b. Modificar el c칩digo para que funcione para C consumidores y P productores.

** EN este caso seria la logica similar a la anterior, salvo que la var pri_ocupada//pri_vacia
 a su vez tambien sera utilizada por procesos para C consumidores y P productores.
 
int cant = 0; int pri_ocupada = 0; int pri_vacia = 0; int buffer[N]

Process Productor [id: 1..P]:: {
    while (true) { 
        //produce elemento
        <await (cant < N); cant++;
        buffer[pri_vacia] = elemento; 
        pri_vacia = (pri_vacia + 1) mod N;>
    }
}

Process Consumidor [id: 1..C]:: { 
    while (true) { 
        <await (cant > 0); cant-- ;
        elemento = buffer[pri_ocupada]; 
        pri_ocupada = (pri_ocupada + 1) mod N;>
        //consume elemento
    }
}