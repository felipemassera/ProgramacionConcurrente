3.
Existen N personas que deben fotocopiar un documento. La fotocopiadora sólo puede ser usada por una persona a la vez.
 Analice el problema y defina qué procesos, recursos y monitores serán necesarios/convenientes, además de las posibles
 sincronizaciones requeridas para resolver el problema. Luego, resuelva considerando las siguientes situaciones:
a)
Implemente una solución suponiendo no importa el orden de uso. Existe una función Fotocopiar()
 que simula el uso de la fotocopiadora.

process persona [id:1..N]{
    Documento documento; 
    Documento copia;    
    Fotocopiadora.fotocopiar(documento,copia);
}

Monitor Fotocopiadora{
    procedure fotocopiar(documento: IN Documento; copia: OUT Documento){
        copia = Fotocopiar(documento)
    }
}

b)Modifique la solución de (a) para el caso en que se deba respetar el orden de llegada.

Monitor Fotocopiadora{
    cond colaEspera;
    boolean fotocopiadoraLibre =true;

    procedure solicitarFotocopiadora(){
        if (fotocopiadoraLibre){
            fotocopiadoraLibre=false;
        }else{
            wait(colaEspera);
        }
    }
    procedure liberarFotocopiadora(){
        if (enEspera.Empty()){
            fotocopiadoraLibre=true;
        }else{
            signal(colaEspera);
        }
    }
}
process Persona[1..N]{
    Documento documento; Documento copia;
    Fotocopiadora.solicitarFotocopiadora();
    copia= fotocopiar(documento);
    Fotocopiadora.liberarFotocopiadora();
}

c)Modifique la solución de (b) para el caso en que se deba dar prioridad de acuerdo con la edad de cada persona 
(cuando la fotocopiadora está libre la debe usar la persona de mayor edad entre las que estén esperando para usarla).

Monitor Fotoopiadora{
    cond colaEspera[N];
    boolean fotocopiadoraLibre = true;
    cola cola;

    procedure solicitarFotocopiadora(edad: IN int,id: IN int){
        if( fotocopiadoraLibre){
            fotocopiadoraLibre= false;
        }else{
            cola.insertarOrdenado(edad,id);
            wait(colaEspera[id]);
        }
    }

    procedure liberarFotocopiadora(){
        int idSiguiente=-1;
        
        if (enEspera.empty()){
            fotocopiadoraLibre=true;
        }else{
            idSiguiente= cola.pop();
            signal(colaEspera[idSiguiente]);
        }
    }
} //fin monitores

process Persona [id:0..N-1]{
    Documento documento; Documento copia; int edad=!?;
    Fotocopiadora.solicitarFotocopiadora(edad,id);
    copia= fotocopiar(documento);
    Fotocopiadora.liberarFotocopiadora();
}


d)Modifique la solución de (a) para el caso en que se deba respetar estrictamente el orden dado por el identificador del proceso
 (la persona X no puede usar la fotocopiadora hasta que no haya terminado de usarla la persona X-1).

Monitor Fotocopiadora{
    cond colaEspera[N];
    int proximo=1;

    procedure solicitarFotocopiadora(id:IN int){
        if (siguiente <> id){
            wait(colaEsperap[id]);
        }
    }
    procedure fotocopiar(documento: IN Documento, copia:OUT Documento){
        copia = Fotocopiar(documento);
        proximo= proximo +1;
        signal(colaEspera[proximo]);
    }
}

process Persona [id: 1..N]{
    Documento documento, copia;
    Fotocopiadora.solicitarFotocopiadora(id);
    Fotocopiadora.Fotocopiar(documento,copia);
}

e)Modifique la solución de (b) para el caso en que además haya un Empleado que le indica a cada persona cuando debe usar la fotocopiadora.

Monitor Fotocopiadora{
    cond colaEspera; cond avisoEmpleado;cond impresoraLibre;
    int enEspera=0;
    
    procedure solicitarFotocopiadora(){
        enEspera = enEspera+1;
        signal(avisoEmplead);
        wait(colaEspera);
    }

    procedure liberarFotocopiadora(){
        signal(impresoraLibre);
    }
    
    procedure avisarPersona(){
        if (enEspera==0){
            wait(avisoEmpleado);
        }
        enEspera = enEspera-1;
        signal(colaEspera);
        wait(impresoraLibre);
    }
}

process Persona[id: 1..N]{
    Documento documento; Documento copia;
    Fotocopiadora.solicitarFotocopiadora();
    copia= fotocopiar(documento);
    Fotocopiadora.liberarFotocopiadora();
    
}

proces Empleado{
    for (int i=1; i<N, i++){
        Fotocopiadora.avisarPersona();
    }
}
f)Modificar la solución (e) para el caso en que sean 10 fotocopiadoras. El empleado le indica a la persona cuál fotocopiadora usar y cuándo hacerlo.

Monitor mFotocopiadora{
    cond colaEspera[N]; cond empleado;cond impresoraLibre;                  //se usan las 3 condiciones personas(a la espera que nos avisen que podemos seguir), 
                                                                            empleado(para avisar que trabaje), impresora(donde el trabajador queda dormido si todas
                                                                            las impresoras estan ocupadas)
    int fotocopiadoraAsignada[N]=([N]0);                                    //array usado para asignar un id de impresora determinado a una persona. 
    cola colafotocopiadora[10]=(1,2,3,4,5,6,7,8,9,10); cola colaPersonas;   
    
    procedure solicitarFotocopiadora(id: in int; fotocopiadora:out int){    
        colaPersonas.push(id);
        signal(empleado);
        wait(colaEspera[id]);
        fotocopiadora= fotocopiadoraAsignada[id];
    }

    procedure avisarPersona(){
        int id=-1; int idFotocopiadora=-1;
        
        if (colaPersonas.empty()){
            wait(empleado);
        }
        if (colaImpresora.empty()){
            wait(impresoraLibre);
        }
        id= colaPersonas.pop();
        idFotocopiadora= colafotocopiadora.pop();
        fotocopiadoraAsignada[id]=idFotocopiadora;
        signal[id];
    }
    
    procedure liberarFotocopiadora(fotocop: in int){
        colafotocopiadora .push(fotocop);
        signal(impresoraLibre);
    }
}

process Persona[id: 1..N]{
    Documento documento; Documento copia; int idFotocopiadora;
    Fotocopiadora.solicitarFotocopiadora(id, idFotocopiadora);
    copia= fotocopiar(documento, idFotocopiadora);
    Fotocopiadora.liberarFotocopiadora(idFotocopiadora);
    
}

proces Empleado{
    for (int i=1; i<N, i++){
        Fotocopiadora.avisarPersona();
    }
}