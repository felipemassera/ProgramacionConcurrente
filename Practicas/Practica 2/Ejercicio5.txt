5.En una empresa de logística de paquetes existe una sala de contenedores donde se preparan las entregas.
Cada contenedor puede almacenar un paquete y la sala cuenta con capacidad para N contenedores.
Resuelva considerando las siguientes situaciones:

a)La empresa cuenta con 2 empleados: un empleado Preparador que se ocupa de preparar los paquetes
 y dejarlos en los contenedores; un empelado Entregador que se ocupa de tomar los paquetes de los 
 contenedores y realizar la entregas. Tanto el Preparador como el Entregador trabajan de a un paquete por vez.

*****************EJEMPLO PRODUCTOR -> CONSUMIDOR// BUFFERS LIMITADOS(teoria 4 pag 12)*****************

sem vacio=1; lleno =0;                      //uso dos semaforos para que se informen  entre ellos el estado del contenedor;
sem mutex=1;                                //semaforo que indica cuando escribo sobre el array y modifico Libre/ocupado;
Contenedor colaContenedores[0..N-1];        //cola circular de contenedores
int ocupado=0; libre =0;                    //estos marcan el estado de la cola. el primero que este libre y el primero que este ocupado;

Process Preparador::
{
    while (true){
        **PREPARO PAQUETE**
        P(vacio[libre]);                                   //chequeo que contenedor este vacio
            contenedor[libre] = paquete;        //deposito el paquete en el primer lugar libre
        V(lleno[libre])                                    //libero el contenedor
        libre = (libre +1) mod N;                   //muevo la guia al siguiente contenedor libre
    }
}

Process Entregador::
{
    while(true){
        P(lleno[ocupado]);
            paquete= contenedor[ocupado]    
        V(vacio[ocupado]);                           
        ocupado= (ocupado+1)mod N;
        **ENTREGO PAQUETE**
    }
}
DUDA: EN ESTE CASO NO ESTOY TRABAJANDO DE AUNA CAJA A LA VEZ?? O sea una vez cargado el contenedor,
 el preparador no puede depositar el prox paquete en la caja hasta que no sea extraida por el entregador.
No seria lo mismo hacerlo de la manera de abajo? 

b)Modifique la solución a) para el caso en que haya P empleados Preparadores.

sem vacio=1; lleno =0;                      //uso dos semaforos para que se informen  entre ellos el estado del contenedor;
sem mutex=1;                                //semaforo que indica cuando escribo sobre el array y modifico Libre/ocupado;
Contenedor colaContenedores[0..N-1];        //cola circular de contenedores
int ocupado=0; libre =0;                    //estos marcan el estado de la cola. el primero que este libre y el primero que este ocupado;

Process Preparador [id:1..P]::
{
    while (true){
        **PREPARO PAQUETE**
        P(vacio);                           //chequeo que contenedor este vacio; chequea que [vacio>0];
            P(mutex);                           //solicita por exclusion mutua el acceso a var globales;
                contenedor[libre] = paquete;        //deposito el paquete en el primer lugar libre
                libre = (libre +1) mod N;           //muevo la guia al siguiente contenedor libre
            V(mutex);                           //como hay mas de 1 preparador, se bloquea la modificacion de libre=...
        V(lleno);                           //libero el contenedor
    }
}

Process Entregador::
{
    while(true){
        P(lleno);                           //chequeo que el contenedor tenga el paquete
            P(mutex);
                paquete= contenedor[ocupado]        //Saco paquete
            V(mutex);                           //no hace falta que el v(mutex) sea posterior a ocupado=ocupado... ya que nadie modifica la var
        ocupado= (ocupado+1)mod N;              mas que el unico entregador.
        V(vacio);                           //libero el contenedor
        **ENTREGO PAQUETE**
    }
}

-----------------------------------

Process Preparador::
{
    while (true){
        **PREPARO PAQUETE**
        P(vacio[libre]);                                   //chequeo que contenedor este vacio
            contenedor[libre] = paquete;        //deposito el paquete en el primer lugar libre
            libre_old = libre;                   //muevo la guia al siguiente contenedor libre
            libre = (libre +1) mod N;                   //muevo la guia al siguiente contenedor libre
        V(lleno[libre_old])                                    //libero el contenedor
    }
}

Process Entregador::
{
    while(true){
        P(lleno[ocupado]);
            paquete= contenedor[ocupado]    
        V(vacio[ocupado]);                           
        ocupado= (ocupado+1)mod N;
        **ENTREGO PAQUETE**
    }
}

c)Modifique la solución a) para el caso en que haya E empleados Entregadores.

sem vacio=1; lleno =0;                      //uso dos semaforos para que se informen  entre ellos el estado del contenedor;
sem mutex=1;                                //semaforo que indica cuando escribo sobre el array y modifico Libre/ocupado;
Contenedor colaContenedores[0..N-1];        //cola circular de contenedores
int ocupado=0; libre =0;                    //estos marcan el estado de la cola. el primero que este libre y el primero que este ocupado;

Process Preparador::
{
    while (true){
        **PREPARO PAQUETE**
        P(vacio[libre]);                                   //chequeo que contenedor este vacio
            contenedor[libre] = paquete;        //deposito el paquete en el primer lugar libre
        V(lleno[libre])                                    //libero el contenedor
        libre = (libre +1) mod N;                   //muevo la guia al siguiente contenedor libre
    }
}

Process Entregador::
{
    while(true){
        P(lleno[ocupado]);
            paquete= contenedor[ocupado]
            ocupado_old= ocupado;    
            ocupado= (ocupado+1)mod N;
        V(vacio[ocupado_old]);                           
        **ENTREGO PAQUETE**
    }
}

d)Modifique la solución a) para el caso en que haya P empleados Preparadores y E empleadores Entregadores.

sem vacio=1; lleno =0;                      //uso dos semaforos para que se informen  entre ellos el estado del contenedor;
sem mutex=1;                                //semaforo que indica cuando escribo sobre el array y modifico Libre/ocupado;
Contenedor colaContenedores[0..N-1];        //cola circular de contenedores
int ocupado=0; libre =0;                    //estos marcan el estado de la cola. el primero que este libre y el primero que este ocupado;

Process Preparador::
{
    while (true){
        **PREPARO PAQUETE**
        P(vacio[libre]);                                   //chequeo que contenedor este vacio
            contenedor[libre] = paquete;        //deposito el paquete en el primer lugar libre
            libre_old = libre;                   //muevo la guia al siguiente contenedor libre
            libre = (libre +1) mod N;                   //muevo la guia al siguiente contenedor libre
        V(lleno[libre_old])                                    //libero el contenedor
    }
}

Process Entregador::
{
    while(true){
        P(lleno[ocupado]);
            paquete= contenedor[ocupado]
            ocupado_old= ocupado;    
            ocupado= (ocupado+1)mod N;
        V(vacio[ocupado_old]);                           
        **ENTREGO PAQUETE**
    }
}